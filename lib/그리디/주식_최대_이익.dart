// ===================================================
// 문제: 주식 최대 이익 (Best Time to Buy and Sell Stock II) (그리디)
// ===================================================
// 문제 설명:
// 주식 가격이 날짜별로 주어질 때, 여러 번 거래하여 얻을 수 있는 최대 이익을 구하세요.
// 단, 주식은 한 번에 하나만 보유할 수 있습니다(새로 사기 전에 팔아야 함).
//
// 제한 사항:
// - 1 <= prices.length <= 3 * 10^4
// - 0 <= prices[i] <= 10^4
//
// 입출력 예시:
// 입력: [7, 1, 5, 3, 6, 4]
// 출력: 7
// 설명: 1에 사서 5에 팔고, 3에 사서 6에 팔면 총 이익은 (5-1) + (6-3) = 7
//
// 입력: [1, 2, 3, 4, 5]
// 출력: 4
// 설명: 1에 사서 5에 팔거나, 매일 사고팔면서 상승분을 이익으로 취하면 됩니다.
//
// 입력: [7, 6, 4, 3, 1]
// 출력: 0
// 설명: 계속 하락하므로 거래하지 않는 것이 최선입니다.
// ===================================================

// 함수 설명: 주식 거래로 얻을 수 있는 최대 이익을 계산합니다.
// prices: 날짜별 주식 가격 배열
int maxProfit(List<int> prices) {
  // 여기에 코드를 작성하세요
  return 0; // 기본 반환값
}

// 사용 예시
void main() {
  List<int> prices = [7, 1, 5, 3, 6, 4];
  // 결과: 7 (1에 사서 5에 팔고, 3에 사서 6에 팔면 총 이익은 (5-1) + (6-3) = 7)
}
