// ===================================================
// 문제: 회의실 배정 (그리디/정렬)
// ===================================================
// 문제 설명:
// 한 개의 회의실이 있고, N개의 회의를 진행하려고 합니다. 각 회의는 시작 시간과 끝나는 시간이 주어집니다.
// 회의실을 사용하고자 하는 최대 회의 개수를 구하세요.
// 단, 회의는 한번 시작하면 중간에 중단될 수 없으며, 한 회의가 끝나는 것과 동시에 다음 회의가 시작될 수 있습니다.
//
// 제한 사항:
// - 회의의 개수 N (1 ≤ N ≤ 100,000)
// - 각 회의의 시작 시간과 끝나는 시간은 0 이상 2^31-1 이하의 정수입니다.
//
// 입출력 예시:
// 입력: [[1, 4], [3, 5], [0, 6], [5, 7], [3, 8], [5, 9], [6, 10], [8, 11], [8, 12], [2, 13], [12, 14]]
// 출력: 4
// 설명: [1, 4], [5, 7], [8, 11], [12, 14]를 선택했을 때 회의실을 사용할 수 있는 최대 회의 개수는 4개입니다.
// ===================================================

// 함수 설명: 주어진 회의 정보로 최대 회의 개수를 반환합니다.
// meetings: 각 회의의 [시작 시간, 끝나는 시간]이 담긴 2차원 리스트
// 반환값: 최대 회의 개수
int maxMeetings(List<List<int>> meetings) {
  meetings.sort((a, b) => a[1].compareTo(b[1]));

  int count = 0;
  int end = 0;

  for (var i in meetings) {
    if (i[0] >= end) {
      count++;
      end = i[1];
    }
  }

  return count;
}

// 테스트 코드
void main() {
  final meetings = [
    [1, 4],
    [3, 5],
    [0, 6],
    [5, 7],
    [3, 8],
    [5, 9],
    [6, 10],
    [8, 11],
    [8, 12],
    [2, 13],
    [12, 14],
  ];

  print(maxMeetings(meetings)); // 예상 출력: 4
}
